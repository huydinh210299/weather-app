{"version":3,"sources":["hooks/useForecast.js","helpers/numberHelper.js","helpers/dayHelper.js","component/forcast_item/ForeCastItem.js","component/forecast/Forecast.js","component/form/SearchForm.js","App.js","reportWebVitals.js","index.js"],"names":["REQUEST_URL","useForecast","useState","isError","setError","isLoading","setLoading","hasForecast","setForecast","City","setCity","getLocation","location","a","axios","get","params","query","data","length","console","log","title","getForeCastData","woeid","submitRequest","city","consolidated_weather","numberHelper","roundNumber","value","Math","floor","Day","Month","dayHelper","getCurrentDay","Date","getDay","getCurrentDate","current","date","getDate","month","getMonth","ForeCastItem","className","width","src","weather_state_abbr","the_temp","applicable_date","Forecast","forecast","gutter","style","height","span","weather_state_name","paddingRight","predictability","humidity","wind_speed","air_pressure","max_temp","min_temp","map","index","SearchForm","handleRequest","useForm","register","handleSubmit","onSubmit","id","type","name","placeholder","required","App","fontSize","textAlign","color","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c933d9e6.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://www.metaweather.com/api/location\";\r\nconst CROSS_DOMAIN = \"https://the-ultimate-api-challenge.herokuapp.com\";\r\nconst REQUEST_URL = `${CROSS_DOMAIN}/${BASE_URL}`;\r\n\r\nconst useForecast = () => {\r\n  const [isError, setError] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [hasForecast, setForecast] = useState(null);\r\n  const [City, setCity] = useState(null);\r\n\r\n  const getLocation = async (location) => {\r\n    const { data } = await axios.get(`${REQUEST_URL}/search`, {\r\n      params: { query: location },\r\n    });\r\n    if (!data || data.length === 0) {\r\n      console.log(\"error\");\r\n      setError(\"No location is finded!\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setCity(data[0].title);\r\n    return data[0];\r\n  };\r\n\r\n  const getForeCastData = async (woeid) => {\r\n    const { data } = await axios.get(`${REQUEST_URL}/${woeid}`);\r\n    if (!data || data.length === 0) {\r\n      console.log(\"error2\");\r\n      setError(\"Something went wrong!\");\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const submitRequest = async ({ location }) => {\r\n    setLoading(true);\r\n    setError(false);\r\n    if (!location) {\r\n      setLoading(false);\r\n      setError(\"You should insert a location!\");\r\n      return;\r\n    }\r\n    const city = await getLocation(location);\r\n    console.log(city);\r\n    if (!city?.woeid) return;\r\n    const data = await getForeCastData(city.woeid);\r\n    if (!data) return;\r\n    setLoading(false);\r\n    setForecast(data.consolidated_weather);\r\n  };\r\n\r\n  return { isError, isLoading, hasForecast, City, submitRequest };\r\n};\r\n\r\nexport default useForecast;\r\n","const numberHelper = () => {\r\n  const roundNumber = (value) => {\r\n    return Math.floor(value);\r\n  };\r\n  return { roundNumber };\r\n};\r\n\r\nexport default numberHelper;\r\n","const Day = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst Month = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\n\r\nconst dayHelper = () => {\r\n  const getCurrentDay = (value) => {\r\n    return Day[new Date(value).getDay()];\r\n  };\r\n\r\n  const getCurrentDate = (value) => {\r\n    const current = new Date(value);\r\n    let date = current.getDate();\r\n    switch (date) {\r\n      case 1:\r\n        date += \"st\";\r\n        break;\r\n      case 2:\r\n        date += \"nd\";\r\n        break;\r\n      case 3:\r\n        date += \"rd\";\r\n        break;\r\n      default:\r\n        date += \"th\";\r\n    }\r\n    const month = Month[current.getMonth()];\r\n    return `${month} ${date}`;\r\n  };\r\n\r\n  return { getCurrentDay, getCurrentDate };\r\n};\r\n\r\nexport default dayHelper;\r\n","import React from \"react\";\r\nimport numberHelper from \"../../helpers/numberHelper\";\r\nimport dayHelper from \"../../helpers/dayHelper\";\r\nimport \"./ForeCastItem.css\";\r\n\r\nconst imgUrlBase = \"https://www.metaweather.com/static/img/weather/\";\r\n\r\nconst ForeCastItem = ({ data }) => {\r\n  const { roundNumber } = numberHelper();\r\n  const { getCurrentDay } = dayHelper();\r\n  return (\r\n    <div className=\"forcast-item\">\r\n      <img width=\"30\" src={`${imgUrlBase}${data.weather_state_abbr}.svg`}></img>\r\n      <div>{roundNumber(data.the_temp)} Â°C</div>\r\n      <div>{getCurrentDay(data.applicable_date)}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForeCastItem;\r\n","import React, { Fragment } from \"react\";\r\nimport { Col, Row } from \"antd\";\r\nimport ForeCastItem from \"../forcast_item/ForeCastItem\";\r\nimport dayHelper from \"../../helpers/dayHelper\";\r\nimport numberHelper from \"../../helpers/numberHelper\";\r\nimport \"./Forecast.css\";\r\n\r\nconst Forecast = ({ forecast, city }) => {\r\n  const { getCurrentDay, getCurrentDate } = dayHelper();\r\n  const { roundNumber } = numberHelper();\r\n  console.log(forecast);\r\n  return (\r\n    <Row gutter={16} style={{ height: \"100%\" }}>\r\n      <Col\r\n        className=\"gutter-row weather-image current-day dflex-column-between\"\r\n        span=\"8\"\r\n      >\r\n        <div>\r\n          <div className=\"font-25-bold\">\r\n            {getCurrentDay(forecast[0].applicable_date)}\r\n          </div>\r\n          <div>! {city}</div>\r\n          <div>{getCurrentDate(forecast[0].applicable_date)}</div>\r\n        </div>\r\n        <div>\r\n          <div className=\"font-25-bold\">\r\n            {roundNumber(forecast[0].the_temp)}Â°C\r\n          </div>\r\n          <div>{forecast[0].weather_state_name}</div>\r\n        </div>\r\n      </Col>\r\n      <Col\r\n        className=\"gutter-row dflex-column-between\"\r\n        span=\"16\"\r\n        style={{ paddingRight: \"15px\" }}\r\n      >\r\n        <div>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">predictability</div>\r\n            <div>{forecast[0].predictability} %</div>\r\n          </span>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">humidity</div>\r\n            <div>{forecast[0].humidity} %</div>\r\n          </span>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">wind</div>\r\n            <div>{roundNumber(forecast[0].wind_speed)} km/h</div>\r\n          </span>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">air pressure</div>\r\n            <div>{forecast[0].air_pressure} mb</div>\r\n          </span>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">max temp</div>\r\n            <div>{roundNumber(forecast[0].max_temp)} Â°C</div>\r\n          </span>\r\n          <span className=\"dflex-row-between\">\r\n            <div className=\"font-13-bold\">min temp</div>\r\n            <div>{roundNumber(forecast[0].min_temp)} Â°C</div>\r\n          </span>\r\n        </div>\r\n        <div className=\"dflex-row-between forecast-wrapper\">\r\n          {forecast.map(\r\n            (data, index) =>\r\n              index != 0 && (\r\n                <ForeCastItem data={data} key={index}></ForeCastItem>\r\n              )\r\n          )}\r\n        </div>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./SearchForm.css\";\r\nconst SearchForm = ({ handleRequest }) => {\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleRequest)} id=\"search-form\">\r\n      <input\r\n        type=\"text\"\r\n        name=\"location\"\r\n        placeholder=\"Type the location\"\r\n        required\r\n        {...register(\"location\")}\r\n      ></input>\r\n      <button type=\"submit\" className=\"btn-grad\">\r\n        SEARCH\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","import \"./App.css\";\nimport useForecast from \"./hooks/useForecast\";\nimport Forecast from \"./component/forecast/Forecast\";\nimport SearchForm from \"./component/form/SearchForm\";\nimport { Spin } from \"antd\";\n\nfunction App() {\n  const { isError, isLoading, hasForecast, City, submitRequest } =\n    useForecast();\n  return (\n    <div className=\"App\">\n      <div style={{ fontSize: \"30px\", textAlign: \"center\", color: \"white\" }}>\n        Weather <b>Forecast</b>\n      </div>\n      {!hasForecast && (\n        <div className=\"box\">\n          <SearchForm handleRequest={submitRequest}></SearchForm>\n          {isError && <div style={{ color: \"red\" }}>{isError}</div>}\n          {isLoading && <Spin style={{ width: \"100%\", marginTop: \"10px\" }} />}\n        </div>\n      )}\n\n      {hasForecast && (\n        <div className=\"box forecast\">\n          <Forecast forecast={hasForecast} city={City}></Forecast>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}